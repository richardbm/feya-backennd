# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-04-23 13:00
from __future__ import unicode_literals
from django.db import migrations
import os
import json


FOLDER_ROOT = os.path.dirname(os.path.abspath(__file__))
FIELD_DATA_FILE = os.path.join(FOLDER_ROOT, "publications.json")



def load_publications(apps, schema_editor):
    # We can't import the model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    publication_model = apps.get_model("blog", "publication")
    category_model = apps.get_model("blog", "category")
    owner = apps.get_model("accounts", "membership")
    json_file = open(FIELD_DATA_FILE).read()
    json_data = json.loads(json_file)
    for json_object in json_data:
        publication = publication_model()
        publication.title = json_object["fields"]["title"]
        publication.text = json_object["fields"]["text"]
        publication.owner = owner.objects.first()
        publication.save()
        category, created = category_model.objects.get_or_create(name="Pr√©dicas")
        publication.categories.add(category)


class Migration(migrations.Migration):
    dependencies = [
        ('blog', '0008_auto_20171020_0047'),

    ]

    operations = [
        migrations.RunPython(load_publications),
    ]

# from django.utils import timezone
# from blog.models import Publication
# from random import choice
# hours = range(14, 17)
# minutes = range(5, 59)
# seconds = range(5, 59)
#
#
# dates = [
#     "07/09/2017",
#     "11/09/2017",
#     "14/09/2017",
#     "18/09/2017",
#     "21/09/2017",
#     "25/09/2017",
#     "28/09/2017",
#     "03/10/2017",
#     "05/10/2017",
#     "07/09/2017",
#     "11/09/2017",
#     "14/09/2017",
#     "18/09/2017",
#     "21/09/2017",
#     "25/09/2017",
#     "28/09/2017",
#     "03/10/2017",
#     "05/10/2017"
# ]
#
# for pub in Publication.objects.all():
#     date = choice(dates)
#     hour = choice(hours)
#     minute = choice(minutes)
#     second = choice(seconds)
#     date_time = "{d}T{h}:{m}:{s}".format(d=date, h=hour, m=minute, s=second)
#     pub.date = timezone.datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
#     pub.save()